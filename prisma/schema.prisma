datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  username      String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Todo      String?
  Events    String?
  Docknotes Docknotes?
  collaboratoinId String?
  collabration Collabration? @relation(fields: [collaboratoinId], references: [id])
  socketId String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Todo {
//   id        String   @id @default(cuid())
//   todo      String
//   completed Boolean  @default(false)
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Docknote {
  id        String    @id @default(cuid())
  titles    String[]
  Docknotes Docknotes @relation(fields: [id], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Collabration Collabration[]
}

model Docknotes {
  id        String     @id @default(cuid())
  docknotes Docknote[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Collabration {
  id        String  @id @default(cuid())
  docknote  Docknote @relation(fields: [docknoteId], references: [id])
  docknoteId String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
